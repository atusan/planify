{"ast":null,"code":"function setToken(token) {\n  if (token) {\n    // localStorage is given to us by the browser\n    localStorage.setItem('token', token);\n  } else {\n    localStorage.removeItem('token');\n  }\n}\n\nfunction getToken() {\n  let token = localStorage.getItem('token');\n\n  if (token) {\n    // Check if expired, remove if it is\n    // atob is a function that decodes a base-64 string\n    const payload = JSON.parse(atob(token.split('.')[1])); // JWT's exp is expressed in seconds, not milliseconds, so convert\n\n    if (payload.exp < Date.now() / 1000) {\n      localStorage.removeItem('token');\n      token = null;\n    }\n  }\n\n  return token;\n}\n\nfunction getUserFromToken() {\n  const token = getToken();\n  return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n}\n\nfunction removeToken() {\n  localStorage.removeItem('token');\n}\n\nexport default {\n  setToken,\n  getToken,\n  removeToken,\n  getUserFromToken\n};","map":{"version":3,"sources":["/Users/atusanaseri/code/project4/src/utils/tokenService.js"],"names":["setToken","token","localStorage","setItem","removeItem","getToken","getItem","payload","JSON","parse","atob","split","exp","Date","now","getUserFromToken","user","removeToken"],"mappings":"AAAA,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AACrB,MAAIA,KAAJ,EAAW;AACT;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACD,GAHD,MAGO;AACLC,IAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACD;AACF;;AAED,SAASC,QAAT,GAAoB;AAClB,MAAIJ,KAAK,GAAGC,YAAY,CAACI,OAAb,CAAqB,OAArB,CAAZ;;AACA,MAAIL,KAAJ,EAAW;AACT;AACA;AACA,UAAMM,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACT,KAAK,CAACU,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,CAAhB,CAHS,CAIT;;AACA,QAAIJ,OAAO,CAACK,GAAR,GAAcC,IAAI,CAACC,GAAL,KAAa,IAA/B,EAAqC;AACnCZ,MAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACAH,MAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AACD,SAAOA,KAAP;AACD;;AAED,SAASc,gBAAT,GAA4B;AAC1B,QAAMd,KAAK,GAAGI,QAAQ,EAAtB;AACA,SAAOJ,KAAK,GAAGO,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACT,KAAK,CAACU,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAD,CAAf,EAAsCK,IAAzC,GAAgD,IAA5D;AACD;;AAED,SAASC,WAAT,GAAuB;AACrBf,EAAAA,YAAY,CAACE,UAAb,CAAwB,OAAxB;AACD;;AAED,eAAe;AACbJ,EAAAA,QADa;AAEbK,EAAAA,QAFa;AAGbY,EAAAA,WAHa;AAIbF,EAAAA;AAJa,CAAf","sourcesContent":["function setToken(token) {\n    if (token) {\n      // localStorage is given to us by the browser\n      localStorage.setItem('token', token);\n    } else {\n      localStorage.removeItem('token');\n    }\n  }\n  \n  function getToken() {\n    let token = localStorage.getItem('token');\n    if (token) {\n      // Check if expired, remove if it is\n      // atob is a function that decodes a base-64 string\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      // JWT's exp is expressed in seconds, not milliseconds, so convert\n      if (payload.exp < Date.now() / 1000) {\n        localStorage.removeItem('token');\n        token = null;\n      }\n    }\n    return token;\n  }\n  \n  function getUserFromToken() {\n    const token = getToken();\n    return token ? JSON.parse(atob(token.split('.')[1])).user : null;\n  }\n  \n  function removeToken() {\n    localStorage.removeItem('token');\n  }\n  \n  export default {\n    setToken,\n    getToken,\n    removeToken,\n    getUserFromToken\n  };"]},"metadata":{},"sourceType":"module"}